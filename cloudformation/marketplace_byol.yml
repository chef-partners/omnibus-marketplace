---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Chef Automate AWS Marketplace BYOL Template: This template provisions and
  configures the latest Chef Automate marketplace image.
Parameters:
  InstanceType:
    Description: Automate EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SshKeyPairName:
    Description: The name of an existing EC2 SSH KeyPair to enable SSH access
      to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SshSecGroupCidr:
    Description: Security Group CIDR block for SSH access.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR block of the form x.x.x.x/x.
  AutomateSecGroupCidr:
    Description: Security Group CIDR block for Chef Automate and Chef server access.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR block of the form x.x.x.x/x.
  VPCCidrBlock:
    Description: The Chef Automate VPC CIDR Block
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR block of the form x.x.x.x/x.
  VPCSubnetCidrBlock:
    Description: The Chef Automate VPC subnet CIDR Block
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR block of the form x.x.x.x/x.
  LicenseUrl:
    Description: (Optional) The URL to a Chef Automate license. Leave blank for a 30 day trial license.
    Type: String
Conditions:
  HasLicenseUrl: !Not
    - !Equals
      - ''
      - !Ref LicenseUrl
Mappings:
  AWSAMIMap:
    us-east-1:
      ID: ami-d963dea3
    us-east-2:
      ID: ami-d963dea3
    us-west-1:
      ID: ami-d963dea3
    us-west-2:
      ID: ami-d963dea3
    eu-west-1:
      ID: ami-d963dea3
    eu-west-2:
      ID: ami-d963dea3
    eu-central-1:
      ID: ami-d963dea3
    ap-northeast-1:
      ID: ami-d963dea3
    ap-northeast-2:
      ID: ami-d963dea3
    ap-southeast-1:
      ID: ami-d963dea3
    ap-southeast-2:
      ID: ami-d963dea3
    ap-south-1:
      ID: ami-d963dea3
    ca-central-1:
      ID: ami-d963dea3
    sa-east-1:
      ID: ami-d963dea3
    cn-north-1:
      ID: ami-d963dea3
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref VPCSubnetCidrBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InboundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '-1'
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutboundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '-1'
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable application and ssh access to Chef Automate
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SshSecGroupCidr
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref AutomateSecGroupCidr
        - IpProtocol: tcp
          FromPort: '8989'
          ToPort: '8989'
          CidrIp: !Ref AutomateSecGroupCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: '0.0.0.0/0'
  AutomateInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Metadata:
      Comment: Create an instance of the Chef Automate Marketplace AMI
    Properties:
      ImageId: !FindInMap
        - AWSAMIMap
        - !Ref 'AWS::Region'
        - ID
      InstanceType: !Ref InstanceType
      KeyName: !Ref SshKeyPairName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash -ex'
            - !If
              - HasLicenseUrl
              - !Sub >-
                chef-marketplace-ctl setup --preconfigure --license-url ${LicenseUrl}
              - chef-marketplace-ctl setup --preconfigure
            - !Sub >-
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutomateInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
Outputs:
  URL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - AutomateInstance
          - PublicDnsName
        - '/biscotti/setup'
    Description: Access the URL to complete the setup
  InstanceId:
    Value: !Ref AutomateInstance
    Description: The Instance ID of the Chef Automate EC2 Instance
